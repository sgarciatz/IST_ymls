    openapi: 3.0.0
    info:
      title: ServerHosting API
      description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
      version: 0.1.9
    servers:
      - url: 'https://serverAPI.com'
    paths:
      /servers:
        get:
          summary: Returns all the servers that are created.
          description: Returns all the servers that are created.
          responses:
            '200':    # status code
              description: OK
              content:
                application/json:
                  schema: 
                    $ref: '#/components/schemas/Server'
            '404': # Not found
              description: Not found
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server not found.
        post:
          summary: Create and inserts a new server in the cloud database.
          description: Create and inserts a new server in the cloud database.
          requestBody:
            required: true
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Server'
          responses:
            '201':
              description: Created
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server created successfully.
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid parameters. 
        
      /servers/{serverId}:
        get:
          summary: Returns a server specified by its ID.
          description: Returns a server specified by its ID.
          parameters: 
          - name: serverId
            in: path
            description: Identifier of a server
            required: true
            schema:
              type: integer
          responses:
            '200':
              description: OK
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Server'
            '404':
              description: Not Found
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server not found.
        put:
          summary: Update characteristic of the server specified by its identifier.
          description: Update characteristic of the server specified by its identifier.
          parameters: 
          - name: serverId
            in: path
            description: Identifier of a server
            required: true
            schema:
              type: integer
              format: int64
          requestBody:
            required: true
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Server'
          responses:
            '200':
              description: OK
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server modified successfully.
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid parameters. 
            '404':
                description: Not found
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Server not found. 
        delete:
          summary: Delete a server given its ID.
          description: Delete a server given its ID.
          parameters: 
          - name: serverId
            in: path
            required: true
            description: Identifier of a server.
            schema:
              type: integer
              format: int64
          responses:
            '200': # status code
              description: OK
              content:
                text/plain:
                  schema: 
                    type: string
                    example: Server deleted.
            '401':
                description: Unauthorized 
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Unauthorized action.                    
            '404':
              description: Not found
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server not found.
                    
 
      /start-server:
        get:
          summary: Starts up the server specified by its identifier.
          description: Starts up the server specified by its identifier.
          parameters:
          - name: serverId
            in: query
            required: true
            description: Identifier of a server.
            schema:
              type: integer
          responses:
            '201':
              description: Started server
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server started up successfully.
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid parameters.
            '401':
                description: Unauthorized 
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Unauthorized action.
            '404':
                description: Not found 
                content:
                  json/plain:
                    schema:
                      type: string
                      example: Server not found.                        
      /stop-server:
        get:
          summary: Stops a running server server.
          description: Stops a running server server.
          parameters:
          - name: serverId
            in: query
            required: true
            description: Identifier of a server.
            schema:
              type: integer
              format: int64
          responses:
            '201':
              description: Stopped server
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server stopped successfully.
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid parameters.
            '401':
                description: Unauthorized 
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Unauthorized action.
            '404':
                description: Not found 
                content:
                  json/plain:
                    schema:
                      type: string
                      example: Server not found.                        

      /servers/{serverId}/whitelist:
        get:
          summary: Retrieves the whitelist of the server spedified by its whitelist.
          description: Retrieves the whitelist of the server spedified by its whitelist.
          parameters:
          - name: serverId
            in: path
            required: true
            description: Identifier of a server.
            schema:
              type: integer
          responses:
            '200':
              description: OK 
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Whitelist'
                    
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid parameters.
            '401':
                description: Unauthorized 
                content:
                  json/plain:
                    schema:
                      type: string
                      example: Unauthorized action.    
            '404':
                description: Not found 
                content:
                  json/plain:
                    schema:
                      type: string
                      example: Server not found.                          
        put:
          summary: Modify the server's whitelist (add users or remove users).
          description: Modify the server's whitelist (add users or remove users).
          parameters:
          - name: serverId
            in: path
            required: true
            description: Identifier of a server.
            schema:
              type: integer
          requestBody:
             content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Whitelist'
          responses:
            '200':
              description: OK
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server's whitelist modified.
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid whilelist.
            '401':
                description: Unauthorized 
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Unauthorized action.
            '404':
                description: Not found 
                content:
                  json/plain:
                    schema:
                      type: string
                      example: Server not found.

        delete:
          summary: Empties the server's whitelist.
          description: Empties the server's whitelist.
          parameters:
            - name: serverId
              in: path
              required: true
              description: Identifier of a server.
              schema:
                type: integer
          responses:
            '200':
              description: OK
              content:
                text/plain:
                  schema:
                    type: string
                    example: Server's whitelist emptied.
            '400':
                description: Bad request
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Invalid whilelist.
            '401':
                description: Unauthorized 
                content:
                  text/plain:
                    schema:
                      type: string
                      example: Unauthorized action.
            '404':
                description: Not found 
                content:
                  json/plain:
                    schema:
                      type: string
                      example: Server not found.
                      
    components:
      schemas:
        Server:
          type: object
          properties:
            serverId:
              type: integer
              example: 1
            ownerId:
              type: integer
              example: 100
            server-name:
              type: string
              example: Minecraft-server
            serverSpecs:
              type: string
              example: MID-TIER
            fileLocation:
              type: string
              example: https://www.example.com/
            status:
              type: string
              example: RUNNING
            whitelist:
              type: array
              items: 
                $ref: '#/components/schemas/Whitelist'
          xml:
            name: server

        Whitelist:
          type: object
          properties:
            users:
              type: string
              example: [100, 200, 300]
          xml:
            name: whitelist
