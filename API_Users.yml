openapi: 3.0.0
info:
  title: Users API
  description: This API is in charge of managing the actions relative to the user data 
  version: 0.1.9
paths:
  /users/register:
    post:
      summary: Submit a form full of information about the user
      description: The user fill the fields of a form that will be used and validated to create a new account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
                example: Correctly registered user.
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: This account already exists.

  /users/login:
    post:
      summary: Submit the username and password to log in the aplication
      description: Submit the username and password to log in the aplication
      operationId: login
      parameters:
        - name: username
          in: query
          required: true
          description: The name of an user.
          schema:
            type : string
            example: Juanito_2000        
        - name: password
          in: query
          required: true
          description: The password of the user.
          schema:
            type : string
            example: password1234            
      responses:
        '200':    # status code
          description: OK
          content:
            text/plain:
              schema: 
                type: string
                example: User logged in.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Username and/or password are incorrect.

  /users/logout:
    get:
      summary: Log out of the account currently logged in
      description: Log out of the account currently logged in
      responses:
        '200':    # status code
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Successful log out.

  /users/{userId}:
    get:
      summary: Return a user by its ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The identifier of an user.
          schema:
            type : integer
            example: 100
      responses: 
        '200':
          description: OK 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found.
    put:
      summary: Modify an user given its ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The identifier of an user.
          schema:
            type : integer
            example: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: User modified.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found.
    delete:
      summary: Delete an user given its ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: The identifier of an user.
          schema:
            type : integer
            example: 100
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: User deleted.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found.

  /users/filterByName:
    get:
      summary: Return all users that match the optional filter.
      parameters:
        - in: query
          name: username
          required: false
          description: The string to filter by username.
          schema:
            type : string
            example: juanito
      responses: 
        '200':
          description: OK 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found.

  /users/ban/{userId}{banFlag}:
    put:
      summary: Ban or unban an user depending on the value of banFlag
      parameters:
        - name: userId
          in: path
          required: true
          description: The identifier of an user.
          schema:
            type : integer
            example: 100
        - name: banFlag
          in: path
          required: true
          description: Flag to ban (true) or unban (false) an user
          schema:
            type: boolean
            example: true
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: User banned.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found.

  /users/friends:
    get:
      summary: Fetch all the friends of an user
      parameters:
        - name: userId
          in: query
          required: true
          description: The identifier of the user querying the API.
          schema:
            type : integer
            example: 100
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found.          
    post:
      summary: Add a new user to the friendlist.
      parameters:
        - name: newFriendId
          in: query
          required: true
          description: The identifier of the user that is going to be added to the friendlist.
          schema:
            type : integer
            example: 100
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
                example: User added to the friendlist.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User not found, could not be added to the friendlist.                 
    delete:
      summary: Delete a friend from the friendlist
      parameters:
        - name: userId
          in: query
          required: true
          description: The identifier of the user querying the API.
          schema:
            type : integer
            example: 100
        - name: unfriendUserId
          in: query
          required: true
          description: The identifier of the user which is going to be removed from the friendlist
          schema:
            type: integer
            example: 200
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: User removed from the friendlist.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: User could not be removed from the friendlist.    

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          example: 100
        username:
          type: string
          example: Juanito_2000
        firstName:
          type: string
          example: Juan
        lastName:
          type: string
          example: DÃ­az
        email:
          type: string
          example: juanito.diaz@email.com
        password:
          type: string
          example: password1234
        phone:
          type: string
          example: '123456789'
      xml:
        name: user




      