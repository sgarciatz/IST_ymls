openapi: 3.0.0
info:
  title: Videogames API
  description: This API is in charge of managing the actions relative to the videogames data
  version: 0.1.9
servers:
  - url: http://api.videogames.com/v1
    description: Optional server description, e.g. Main (production) server
paths:
  /games:
    get:
      tags: [game]
      summary: Returns a list with all the videogames from the cloud database.
      description: Returns a list with all the videogames from the cloud database.
      responses:
        '200':    # status code
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Videogame'
        '404': # Not found
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: Database not found.
    post:
      tags: [game]
      summary: Inserts a new game in the cloud database.
      description: Inserts a new game in the cloud database.
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Videogame'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
                example: Videogame inserted successfully.
        '400':
            description: Bad request
            content:
              text/plain:
                schema:
                  type: string
                  example: This game already exists.
  /games/{gameId}:
    get:
      tags: [game]
      summary: Returns a videogame by its ID.
      description: Returns a videogame by its ID.
      parameters: 
      - name: gameId
        in: path
        required: true
        description: The identifier of an user.
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Videogame'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Game not found.
    delete:
      tags: [game]
      summary: Delete a videogame given its ID.
      description: Delete a videogame given its ID.
      parameters: 
      - name: gameId
        in: path
        required: true
        description: Identifier of an user.
        schema:
          type: integer
          format: int64
      responses:
        '200': # status code
          description: OK
          content:
            text/plain:
              schema: 
                type: string
                example: Videogame deleted.
        '401':
            description: Unauthorized 
            content:
              text/plain:
                schema:
                  type: string
                  example: Unauthorized action.                    
        '404':
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: Videogame not found.
    patch:
      tags: [game]
      summary: Updates the videogame data.
      description: Updates the videogame data.
      parameters: 
      - name: gameId
        in: path
        required: true
        description: Identifier of a game.
        schema:
          type: integer
          format: int64
      requestBody:
        description: Update a videogame with properties to be changed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Videogame'
      responses:
        '200': # status code
          description: OK
          content:
            text/plain:
              schema: 
                type: string
                example: Videogame updated.
        '400':
            description: Bad request
            content:
              text/plain:
                schema:
                  type: string
                  example: Invalid parameters.
        '401':
            description: Unauthorized 
            content:
              text/plain:
                schema:
                  type: string
                  example: Unauthorized action.
        '404':
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: Videogame not found.
                  
  /test-quality/{gameId}:
    get:
      tags: [game]
      summary: Test the quality of the chosen videogame from the cloud database
      description: Test the quality of the chosen videogame from the cloud database
      parameters: 
      - name: gameId
        in: path
        description: Identifier of a game.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200': # status code
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/VideogameTest'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Videogame not found.

  /buy-game/{gameId}:
    post:
      tags: [game]
      summary: Inserts a new game in the user library database.
      description: Inserts a new game in the user library database.
      parameters: 
      - name: gameId
        in: path
        description: ID of game to insert in the user library.
        required: true
        schema:
          type: integer
          format: int64 
      - name: userId
        in: query
        description: ID of user to insert the game.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
                example: Videogame inserted successfully in the user library.
        '400':
            description: Bad request
            content:
              text/plain:
                schema:
                  type: string
                  example: Invalid parameters.
        '401':
            description: Unauthorized 
            content:
              text/plain:
                schema:
                  type: string
                  example: Unauthorized action.

  /gameplay/{gameId}:
    get:
      tags: [gameplay]
      summary: Returns a buffer of frames containing 0, 1 or more frames.
      description: Returns a buffer of frames containing 0, 1 or more frames of the videogame session identified by the user identifier and the videogame identifier.
      parameters: 
      - name: gameId
        in: path
        description: Identifier of game to play.
        required: true
        schema:
          type: integer
          format: int64
      - name: userId
        in: query
        description: Identifier of game to play.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200': # status code
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameBuffer'
        '404': # status code
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: Videogame not found.
    post:
      tags: [gameplay]
      summary: Send the videogames commands chosen by the user.
      description: Send the videogames commands chosen by the user.
      parameters: 
      - name: gameId
        in: path
        description: Identifier of game to play.
        required: true
        schema:
          type: integer
          format: int6
      - name: userId
        in: query
        description: Identifier of game to play.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UserInteraction'
      responses:
        '200': # status code
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: UserInteraction recieved.
        '404': # status code
          description: Not found
          content:
            text/plain:
              schema:
                type: string
                example: Videogame not found.
components:
  schemas:
    Videogame:
      type: object
      properties:
        gameId:
          type: integer
          example: 1
        videogame-name:
          type: string
          example: God Of War
        genre:
          type: string
          example: Fantasia
        files:
          type: string
          example: images,configuration files, design files
      xml:
        name: videogame
        
    VideogameTest:
      type: object
      properties:
        gameId:
          type: integer
          example: 1
        test-files:
          type: string
          example: latency=100ms, frequency = 120fps, CPU/GPU consumption
        datetime:
          type: string
          pattern: '%Y-%m-%d %H:%M:%S'
          example: '2022-12-31 23:59:48'
      xml:
        name: videogameTest
    
    FrameBuffer:
      type: object
      example: [frame1, frame2, frame3]
      xml:
        name: frameBuffer
    UserInteraction:
      type: object
      properties:
        keyCombination:
          type: string
          example: ['C', 'Cntrl', 'Shift']
        action:
          type: string
          example: RELEASE 
      xml:
        name: userInteraction
