openapi: 3.0.0
info:
  title: Chat API
  description: This API is in charge of managing the actions relative to the user data 
  version: 0.1.9
paths:
  /chat/messages:
    get: 
      tags: [message]
      summary: Fetch all the messages sent to an user.
      description: Fetch all the messages sent to an user.
      parameters:
        - in: query
          name: userId
          required: true
          description: The identifier of the user querying the API
          schema:
            type: integer
            example: 100
      responses:
        '200':
          description: OK 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VoiceMessage'

        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: The user specified does not exist.
    post:
      tags: [message]
      summary: Send a message to an user
      description: Send a message to an user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Message sent.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Message could not be sent.
    put:
      tags: [message]
      summary: Modify a sent message.
      description: Modify a sent message.
      parameters:
        - in: query
          name: messageId
          required: true
          description: The identifier of a sent message.
          schema:
            type: integer
            example: 1002001111
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Message modified.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Message could not be found.
    delete:
      tags: [message]
      summary: Delete a sent message.
      description: Delete a sent message.
      parameters:
        - in: query
          name: messageId
          required: true
          description: The identifier of a sent message.
          schema:
            type: integer
            example: 100
      
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Message deleted.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Message could not be deleted.

  /chat/message/filter-by-content/:
    get:
      tags: [message]
      summary: Retrieve all messages given that its content matches the specified string.
      description: Retrieve all messages given that its content matches the specified string.
      parameters:
        - in: query
          name: userId
          description: The identifier of the user querying the API
          required: true
          schema:
            type: string
            example: 100          
        - in: query
          name: filter
          description: The string used to match the desired message 
          required: true
          schema:
            type: string
            example: What's up
      responses:
        '200':
          description: OK 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'                   
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: No messages containing "What's" were found.

  /chat/message/find-by-user:
    get:
      tags: [message]
      summary: Retrieve all messages sent to or received from an specific user.
      description: Retrieve all messages sent to or received from an specific user.
      parameters:
        - in: query
          name: userId
          description: The identifier of the user querying the API
          required: true
          schema:
            type: string
            example: 100
        - in: query
          name: secondUserId
          description: The identifier of the user whose comments are wanted.
          required: true
          schema:
            type: string
            example: 200
      responses:
        '200':
          description: OK 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Messages could not be retrieved
  
  /chat/message/broadcast:
    post:
      tags: [message]
      summary: Send a message to all known users.
      description: Send a message to all known users.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: OK
          content:  
            text/plain:
              schema:
                type: string
                example: Message Broadcasted.
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: The message could not be broadcasted.


  /chat/voice-messages:
    get: 
      tags: [voice message]
      summary: Fetch all the voice messages sent to an user.
      description: Fetch all the voice messages sent to an user.
      parameters:
        - in: query
          name: userId
          required: true
          description: The identifier of the user querying the API
          schema:
            type: integer
            example: 100
      responses:
        '200':
          description: OK 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/VoiceMessage'
                
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: The user specified does not exist.

    post:
      tags: [voice message]
      summary: Send a voice message to an user.
      description: Send a voice message to an user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoiceMessage'
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Voice message sent.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Voice message could not be sent.
    put:
      tags: [voice message]
      summary: Modify a sent voice message.
      description: Modify a sent voice message.
      parameters:
        - in: query
          name: voiceMessageId
          required: true
          description: The identifier of a sent voice message.
          schema:
            type: integer
            example: 100
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoiceMessage'
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Voice message modified.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Voice message could not be found.
    delete:
      tags: [voice message]
      summary: Delete a sent voice message.
      description: Delete a sent voice message.
      parameters:
        - in: query
          name: voiceMessageId
          required: true
          description: The identifier of a sent voice message.
          schema:
            type: integer
            example: 1002002222
      
      responses: 
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Voice message deleted.
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Voice message could not be deleted.
  
  /chat/voice-messages/filter-by-content:
    get:
      tags: [voice message]
      summary: Retrieve all messages given that its transcription matches the specified string.
      description: Retrieve all messages given that its transcription matches the specified string.
      parameters:
        - in: query
          name: userId
          description: The identifier of the user querying the API
          required: true
          schema:
            type: string
            example: 100          
        - in: query
          name: filter
          description: The string used to match the desired message 
          required: true
          schema:
            type: string
            example: What's
      responses:
        '200':
          description: OK 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'                   
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: No messages containing "What's" were found.

  /chat/voice-message/filter-by-user:
    get:
      tags: [voice message]
      summary: Retrieve all messages sent or received to/from an user.
      description: Retrieve all messages sent or received to/from an user.
      parameters:
        - in: query
          name: userId
          description: The identifier of the user querying the API
          required: true
          schema:
            type: string
            example: 100
        - in: query
          name: secondUserId
          description: The identifier of the user whose comments are wanted.
          required: true
          schema:
            type: string
            example: 200
      responses:
        '200':
          description: OK 
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Message'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
                example: Messages could not be retrieved


  /chat/voice-messages/broadcast:
    post:
      tags: [voice message]
      summary: Send a voice message to all known users.
      description: Send a voice message to all known users.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoiceMessage'
      responses:
        '200':
          description: OK
          content:  
            text/plain:
              schema:
                type: string
                example: Voice message Broadcasted
        '400':
          description: Bad request
          content:
            text/plain:
              schema:
                type: string
                example: The voice message could not be broadcasted.

components:
  schemas:
    Message:
      type: object
      properties:
        messageId:
          type: integer
          example: 1002001111
        senderUserId:
          type: int
          example: 100
        receiverUserId:
          type: string
          example: 200
        messageContent:
          type: string
          example: What's up friend?
        timestamp:
          type: string
          example: 2022-07-04*13:23:55
      xml:
        name: user
    VoiceMessage:
      type: object
      properties:
        voiceMessageId:
          type: integer
          example: 1002002222
        senderUserId:
          type: int
          example: 100
        receiverUserId:
          type: string
          example: 200
        voiceMessageContent:
          type: string
          example: '4c6f72656d20697073756d20646f6c6f722073697420616d65744c6f72656d20697073756d20646f6c6f722073697420616d65744c6f72656d20697073756d20646f6c6f722073697420616d6574'
        timestamp:
          type: string
          example: 2022-07-04*13:23:55
      xml:
        name: user        
